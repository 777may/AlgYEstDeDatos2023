#Notación O grande

-O(1) complejidad ctt no varía con tama entrada
-O(log n) -la q mas aparece es base 2- es bueno
-O(n) lineal -doble de datos demora doble de tiempo-
-O(n log n) 
-O(n^2) cuadrática -doble de datos demora 4 veces mas- (n filas x n columnas cuesta n^2)
-O(n^3) cubica -doble de datos demora 8 veces mas-
-O(n^a) polinomial
-O(2^n) exponencial
-O(c^n) exponencial, c >= 2
-O(n!) factorial

##programacion secuencial imperativa (entrada y salida en cintas)

##reglas grales para medir el tiempo
    -ignoradas
    -O(1)
    -secuencia por regla de la suma es la que más crece, ej: O(n) + O(n^2) +  O(log2n) =O(n^2) que es el mayor tiempo encontrado
    -seleccion
    -iteracion n° fijo de veces





    en for las repeticiones son (lim sup - lim inf) +1








#
Funcion estaContenida(L1,L2)
Si estaContenida(L1) entonces
    retorna true
sino
    si pertenece(L2, primerElemento(L1)) entonces
        retorna(estaContenida(Borrar(L1), l2))
    sino
        retorna false



#Planteo ec de recurrencia
T(n,m)         d          n = 0
        c*m + T(n-1, m)   n >= 1
desarrollo recurrencia
n >= 2 T(n,m) = 2cm + T(n-2,m)
n>= 3  T(n,m) = 3cm + T(n-3,m)
generalizo para k
n>= k T(n,m) = kcm + T(n-k,m)
particularizo con k
n = k T(n,m) = ncm + T(0,m)
n = k T(n,m) = ncm + d
conclusion 
O(nm) -pues c es ctte y no afecta-



#Especificación 
CADENAS
concatenar (<abc>   ||     <x y>)   -->      <abcxy>
              s    agregar (t, c)  agregar(concatenar(s,t), c)

              

              